plugins {
    id 'java'
    id 'org.springframework.boot' version '3.5.3'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'org.openapi.generator' version '7.5.0'
    id 'maven-publish'
}

group = 'com.artem'
version = '1.0.0'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

repositories {
    mavenCentral()
    maven {
        url "http://localhost:8081/repository/maven-releases/"
        allowInsecureProtocol = true
    }
    maven {
        url "http://localhost:8081/repository/maven-snapshots/"
        allowInsecureProtocol = true
    }
}

// Задачи для создания OpenAPI артефактов
task openApiJar(type: Jar) {
    archiveBaseName = 'person-service-openapi'
    from fileTree(dir: 'build/generated/src/main/java', includes: ['com/artem/**'])
    from sourceSets.main.output
    include 'com/artem/**'
}

task openApiSourcesJar(type: Jar) {
    archiveBaseName = 'person-service-openapi'
    archiveClassifier.set('sources')
    from fileTree(dir: 'build/generated/src/main/java', includes: ['com/artem/**'])
}

task openApiJavadoc(type: Javadoc) {
    source = fileTree(dir: 'build/generated/src/main/java', includes: ['com/artem/**'])
    classpath = sourceSets.main.compileClasspath
    destinationDir = file("$buildDir/docs/openapi-javadoc")
}

task openApiJavadocJar(type: Jar, dependsOn: openApiJavadoc) {
    archiveBaseName = 'person-service-openapi'
    archiveClassifier.set('javadoc')
    from openApiJavadoc.destinationDir
}

// Конфигурация публикации
publishing {
    publications {
        openApi(MavenPublication) {
            groupId = 'com.artem'
            artifactId = 'person-service-openapi'
            version = '1.0.4'

            artifact openApiJar
            artifact openApiSourcesJar
            artifact openApiJavadocJar

            pom {
                name = 'Person Service OpenAPI Components'
                description = 'Only OpenAPI generated components for Person Service'
                url = 'http://example.com'

                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }

                developers {
                    developer {
                        id = 'artem'
                        name = 'Artem'
                        email = 'artem@example.com'
                    }
                }

                scm {
                    connection = 'scm:git:https://github.com/your-repo/person-service.git'
                    developerConnection = 'scm:git:https://github.com/your-repo/person-service.git'
                    url = 'https://github.com/your-repo/person-service'
                }
            }
        }
    }

    repositories {
        maven {
            def releasesRepoUrl = "http://localhost:8081/repository/maven-releases/"
            def snapshotsRepoUrl = "http://localhost:8081/repository/maven-snapshots/"
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
            allowInsecureProtocol = true

            credentials {
                username = 'admin'
                password = 'admin123'
            }
        }
    }
}

// Зависимости между задачами
openApiJavadoc.dependsOn tasks.named('openApiGenerate')
openApiSourcesJar.dependsOn tasks.named('openApiGenerate')
openApiJar.dependsOn tasks.named('openApiGenerate')
tasks.named('openApiJavadoc') {
    finalizedBy tasks.named('openApiJavadocJar')
}

// Конфигурация OpenAPI генерации
openApiGenerate {
    generatorName = 'java'
    inputSpec = "$projectDir/src/main/resources/person-service.yml"
    outputDir = "$buildDir/generated"
    apiPackage = 'com.artem.api'
    modelPackage = 'com.artem.model'
    configOptions = [
            dateLibrary: "java8",
            openApiNullable: "false",
            useJakartaEe: "true",
            library: "resttemplate"
    ]
}

sourceSets {
    main {
        java {
            srcDirs = ['src/main/java', "$buildDir/generated/src/main/java"]
        }
    }
}

compileJava.dependsOn tasks.openApiGenerate

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.data:spring-data-envers'
    implementation 'org.openapitools:jackson-databind-nullable:0.2.6'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'
    implementation 'com.fasterxml.uuid:java-uuid-generator:5.0.0'
    implementation 'io.micrometer:micrometer-registry-prometheus'
    implementation 'org.springframework.boot:spring-boot-starter-aop'

    compileOnly 'org.projectlombok:lombok'
    runtimeOnly 'org.postgresql:postgresql'
    annotationProcessor 'org.projectlombok:lombok'

    testImplementation 'org.mockito:mockito-core:5.12.0'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.boot:spring-boot-testcontainers'
    testImplementation 'org.testcontainers:junit-jupiter'
    testImplementation 'org.testcontainers:postgresql'
}

tasks.named('test') {
    useJUnitPlatform()
}