@startuml
package "person-service" {
  [API Controller] as Controller <<Spring REST>>
  [User Service] as UserService
  [Individual Service] as IndividualService
  [Address Service] as AddressService
  [Audit Service] as AuditService <<Hibernate Envers>>

  [User Repository] as UserRepo <<Spring Data>>
  [Individual Repository] as IndividualRepo <<Spring Data>>
  [Address Repository] as AddressRepo <<Spring Data>>

  [Transaction Manager] as TxManager <<Spring @Transactional>>
  [OpenAPI Generator] as OpenAPI
  [Monitoring] as Monitoring <<Spring Actuator>>
  [Tracing] as Tracing <<OpenTelemetry>>

  database "PostgreSQL" as DB {
    [users] as Users
    [individuals] as Individuals
    [addresses] as Addresses
    [audit_log] as AuditLog
  }
}

' Основные связи
Controller --> UserService : вызов операций
UserService --> IndividualService : делегирует
UserService --> AddressService : делегирует
UserService --> TxManager : управление транзакциями

' Репозитории
UserService --> UserRepo : использует
IndividualService --> IndividualRepo : использует
AddressService --> AddressRepo : использует
UserRepo --> Users : доступ
IndividualRepo --> Individuals : доступ
AddressRepo --> Addresses : доступ

' Аудит и транзакции
AuditService --> UserService : логирование изменений
AuditService --> AuditLog : запись истории
TxManager --> DB : управление транзакциями

' Вспомогательные компоненты
OpenAPI --> Controller : генерация кода
Monitoring --> Controller : сбор метрик
Tracing --> Controller : трассировка запросов

package "common" {
  [UserDTO] as DTO <<OpenAPI>>
  [Client Library] as Client
}

' Использование DTO
Controller .right.> DTO : использует
UserService .right.> DTO : использует

' Интеграции
node "individuals-api" as IA
IA --> Client : вызовы API
Client --> Controller : маршрутизация

package "Интеграции" {
  [Feign Client] as Feign
  [Prometheus Exporter] as PromExport
  [OTel Exporter] as OTelExport
}

Feign --> Client : реализация
PromExport --> Monitoring : экспорт метрик
OTelExport --> Tracing : экспорт трасс

node "Keycloak" as KC
IA --> KC : регистрация

@enduml